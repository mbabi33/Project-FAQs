
on page CSS

Add css
#IMAGE_PREFIX#plugins/com.oracle.apex.starrating_modern/com_oracle_apex_starrating_modern.css

Hide Report Settings Area
IG REGION--->Attrib-- ADVANCED--JS Initializ_code
function(config) {
    config.reportSettingsArea = false;
    // may want to disable the highlights feature. Comment out this code to make initial highlight settings
    apex.util.getNestedObject(config, "views.grid.features").highlight = false;
    return config;
}

OK?!




----------------------------------------------------------------------------------




Windows List View Style

.ig-windows-style .a-GV-table .a-GV-cell,
.ig-windows-style .a-GV-table .a-GV-controlBreakHeader {
    border-color: transparent;
}
.ig-windows-style .a-GV-w-frozen .a-GV-table {
    border-right: none;
}
.ig-windows-style .a-GV-table tr.is-hover .a-GV-cell,
.ig-windows-style .a-GV-table tr.is-hover.is-selected .a-GV-cell {
    background-color: #f2f6ff;
}
.ig-windows-style .a-GV-table tr.is-selected .a-GV-cell,
.ig-windows-style .a-GV-table tr.is-hover.is-selected .a-GV-cell {
    background-color: #dbe8ff;
}
.ig-windows-style .a-GV-hdr {
    background-color: #fcfcfc;
}
.a-IG-contentContainer {
    margin-top: 0;
}

.ig-windows-style .u-selector {
    box-shadow: none;
    border: 1px transparent;
}

.ig-windows-style .a-GV-hdr tr .u-selector,
.ig-windows-style tr.is-selected .u-selector,
.ig-windows-style tr.is-hover .u-selector {
    box-shadow: 0 1px 1px rgba(0,0,0,.05) inset;
    border: 1px solid #404040;
}


IG REGION--->Attrib-- ADVANCED--JS Initializ_code


function(config) {
    config.defaultGridViewOptions = {
        // this was mentioned in my blog: http://hardlikesoftware.com/weblog/2017/01/24/how-to-hack-apex-interactive-grid-part-2/#more-537
        // relies on internal detail of menu id generation but no other way to get this
        contextMenuId: "emp_ig_selection_actions_menu",
    };
    // override end user report setting for stretch columns
    apex.util.getNestedObject(config, "views.grid.features").stretchColumns = false;
    /* leaving these old comments in place to show benefit of getNestedObject
    // Logically want to do this: config.views.grid.features.stretchColumns = false;
    // But the server may not generate the views, grid, or features objects depending on what declrative options are selected.
    // So must check for and add if needed each one. Seems like there should be an easier way :-(
    var o = config;
    "views.grid.features".split(".").forEach(function(p) { 
        if ( !o[p] ) {
            o[p] = {};
        }
        o = o[p];
    });
    o.stretchColumns = false; */
/* or you could do it this way
    if (!config.views) {
        config.views = {};
    }
    if (!config.views.grid) {
        config.views.grid = {};
    }
    if (!config.views.grid.features) {
        config.views.grid.features = {};
    }
    config.views.grid.features.stretchColumns = false;
*/
    return config;
}

-------------------------------------------------
Rows Per Page on Toolbar
-------------------------------------------------
IG region JS init code
JavaScript Initialization Code
-----------


function(config) {
    var $ = apex.jQuery,
        toolbarData = $.apex.interactiveGrid.copyDefaultToolbar(),
        toolbarGroup = toolbarData.toolbarFind("actions1");

    toolbarGroup.controls.unshift( {
        type: "SELECT",
        action: "change-rows-per-page"
    } );
    // Optional if you want the word Rows like IR had. But this is probably bad for  
    // accessibility because it isn't a label element like in IR  
    //toolbarGroup.controls.unshift( {  
    //    type: "STATIC",  
    //    label: "Rows"  
    //} ); 
    config.toolbarData = toolbarData;
    // the workaround for 5.1 bug given in the forums is no longer needed
    return config;
}


Row height with image

/* 
 As of 18.2 you can let the header labels wrap with the following custom CSS rule
 and the header hight will be adjusted.
 This automatic height adjustment works for labels with an explicit <br> in them 
 as well.
*/
.a-GV-headerLabel {
    white-space: normal;
}

/* You can still set an explicit height if you like but as of 18.2 you don't need to
#emp .a-GV-header {
    height: 60px;
} */
/* 
 Uncomment and show column ONLEAVE for an example where the heading is rotated so that it is vertical.
 See the ONLEAVE column JavaScript init code for how the rotate class is applied.
 NOTE this transform does not affect the measured heigh of the label and so 
 the automatic height adjustment will not work as expected. This is a case
 where you need to set an explicit height.
*/
/*
.rotate.a-GV-header {
    height: 120px;
}
.rotate .a-GV-headerLabel {
    transform: rotate(-90deg);
    display: block;
    white-space: nowrap;
}
*/
#emp .a-GV-cell {
    height: 142px;
}
/* by removing the height the edit fields will be centered */
#emp .a-GV-cell .a-GV-columnItem {
    height: auto;
    
}
/* uncomment to have notes edit in place
#C_NOTES {
    height: 128px;
    width: 100%;
} */
.wrap-cell {
    max-height: 128px;
    white-space: normal;
    overflow: hidden;
}
/* for icon view it is important to scope to a-TMV or something even more specific 
so that it doesn't affect IG dialogs like chart. '*/
#emp .a-IconList-item {
    width: 142px;
    height: 164px;
    text-align: center;
}
#emp .a-IconList-item .u-selector {
    position: absolute;
    width: 23;
}
/* fix icon view styles */
.a-TMV .a-IconList-item.is-selected,
.a-TMV .a-IconList-item.is-selected.is-focused {
    background-color: #ecf3ff;
}
.a-TMV .a-IconList-item.is-focused {
   box-shadow: 1 0 0 3px #4696fc inset, 0 1px 2px rgba(0,0,0,.1);
}

column...
HTML Expression
<image src='#IMAGE_PREFIX#menu/&IMAGE.' width=100 height=128>



-----------------------------------------------------------------------

Variable Height Rows

-----------------------------------------------------------------------
Function and Global Variable Declaration
apex.jQuery(function() {

    /* Commenting out this method of truncating the notes display text in favor of 
     * using NOTES_SHORT column method. See comments in NOTES column attribute
     * JavaScript Initialization Code and in DA on NOTES column.
     
    // DANGER: the callbacks property is not documented or supported. This may break.
    // The right thing to do is to make an item plug-in that is just like Text Area
    // but displays a truncated value by providing displayValueFor callback. 

    // This needs to happen after the column items are initialized but before the grid is rendered -
    // not easy to do. Only works if IG is lazy loaded. Another reason to do it the right way with a plug-in.
    $("#emp").on("interactivegridcreate", function() {
        apex.item("C_NOTES").callbacks.displayValueFor = function(x) {
            return x.length > 180 ? x.substring(0, 180) + "..." : x;
        };
    });

    */
});

Execute when Page Loads
/*
p>Customizations:<br>
See page inline CSS. See Advanced JavaScript Code. Note the width and height of the 
text area are set large so that it will likely be edited as a popup. 
See code in Execute when Page Loads that keeps the row height from shrinking
when the text is edited in a popup.
<br>Issues:<br>
There is no proper way to turn off ability to freeze columns (unless you disable the column heading popup).
The features.freezeColumns option is commented out.
See page Execute when Page Loads for a hack to remove freeze button.<br>
Ideally would like to limit the amount of text shown (so if it is thousands of characters 
it doesn't make the row height unreasonably high) but still allow the text to be edited.
See NOTES_SHORT column and the DA and Advanced JavaScript code on NOTES column. Be sure to read the comments.
See Function and Global Variable Declaration for an alternate hack that sort of works for versions before 18.2.
A custom item plugin would still be the best solution.
</p>


*/



// There is no supported way to turn off the ability to freeze columns.
// This code removes the freeze button from the column header popup "menu".
// DANGER. This is likely to break.
$("#emp").on("gridactivatecolumnheader", function(e) {
    setTimeout(function() {
        // The header popup "menu" is added to the end of the document so it is 
        // not clipped. You will no longer find it under the IG region.
        $("#emp_ig_column_header_menu").find("[data-option='freeze']").remove();            
    }, 1);
});

// make the row height stay consistent when editing a text area.
var gLastActiveRow$ = null;
$("#emp").on("apexbeginrecordedit", function(e) {
    gLastActiveRow$ = $(e.target).find(".a-GV-row.is-active"),
    gLastActiveRow$.css("height", gLastActiveRow$.height());
}).on("apexendrecordedit", function(e) {
    gLastActiveRow$.css("height", ""); // remove height
});


---------------------------------------------------------------------------

change cell prop
.nameColumn {
    padding-left: 24px;
        color: #FBCE4A;
        background-color: blue;
}
.nameColumn .a-GV-columnItem {
    margin-left: 24px;
}
.nameColumn.special::before {
    content: "\f005";
    color: #FBCE4A;
    font-family: 'Font APEX Small' !important;
    display: inline-block;
    font-size: 12px;
    position: absolute;
    left: 6px;
}
at column appierence CSS Class
set nameColumn


--end Simple Cell Style

